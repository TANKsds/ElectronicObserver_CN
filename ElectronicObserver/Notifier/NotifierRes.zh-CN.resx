<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnchorageRepair" xml:space="preserve">
    <value>泊地修理已启动</value>
  </data>
  <data name="AnchorageRepairFinished" xml:space="preserve">
    <value>泊地修理工作开始已经二十分钟了。</value>
  </data>
  <data name="ConditionText" xml:space="preserve">
    <value>#{0} 「{1}」的舰娘疲劳值已恢复。</value>
  </data>
  <data name="ConditionTitle" xml:space="preserve">
    <value>疲劳恢复</value>
  </data>
  <data name="ConstructionText" xml:space="preserve">
    <value>工厂 #{0} 号槽的 「{1}」 建造完成。</value>
  </data>
  <data name="ConstructionTitle" xml:space="preserve">
    <value>建造完成</value>
  </data>
  <data name="DamagedText" xml:space="preserve">
    <value>{0} 大破了！</value>
  </data>
  <data name="DamagedTitle" xml:space="preserve">
    <value>！大破警告！</value>
  </data>
  <data name="ExpeditionTitle" xml:space="preserve">
    <value>远征归来</value>
  </data>
  <data name="RemodelText" xml:space="preserve">
    <value>{0} 可改造为 {1}。</value>
  </data>
  <data name="RemodelTitle" xml:space="preserve">
    <value>可改造</value>
  </data>
  <data name="ExpeditionText" xml:space="preserve">
    <value>#{0}「{1}」已从「{2}: {3}」远征返回。</value>
  </data>
  <data name="FailedPlaySound" xml:space="preserve">
    <value>通知系统：无法播放通知声音。</value>
  </data>
  <data name="FailedToLoadImage" xml:space="preserve">
    <value>通知系统：无法加载通知图像 {0}。</value>
  </data>
  <data name="FailedToLoadSound" xml:space="preserve">
    <value>通知系统：无法加载通知声音 {0}。</value>
  </data>
  <data name="RepairText" xml:space="preserve">
    <value>入渠 #{0} 号槽的 「{1}」 修复完成。</value>
  </data>
  <data name="RepairTitle" xml:space="preserve">
    <value>入渠完成</value>
  </data>
  <data name="AdmiralExp" xml:space="preserve">
    <value>提督Exp+</value>
  </data>
  <data name="ShipExp" xml:space="preserve">
    <value>舰娘Exp+</value>
  </data>
  <data name="ExpeditionResult" xml:space="preserve">
    <value>远征结果 - </value>
  </data>
  <data name="NoResourcesGained" xml:space="preserve">
    <value>没有获得资源</value>
  </data>
  <data name="ShipLevelUp" xml:space="preserve">
    <value>{0} 已达到Lv. {1}。</value>
  </data>
  <data name="ShipsResupplied" xml:space="preserve">
    <value>补给完毕。 消耗： </value>
  </data>
  <data name="BauxiteConsumedByAddingPlaneToAirBase" xml:space="preserve">
    <value>陆航编成完毕、消耗了{0}铝土。</value>
  </data>
  <data name="AirBaseResupplyCost" xml:space="preserve">
    <value>#{0}「{1}」补给完成。消耗：油 x {2}，铝 x {3}</value>
  </data>
  <data name="ExpansionSlotOpened" xml:space="preserve">
    <value>{0}的补强增设（打洞）安装改造已完成。</value>
  </data>
  <data name="ShipSuccessfullyRemodeled" xml:space="preserve">
    <value>{0} Lv. {1} 已成功改造。</value>
  </data>
  <data name="EquipmentHasBenScrapped" xml:space="preserve">
    <value>{0}{1} 已废弃。</value>
  </data>
  <data name="ShipHasBeenScrapped" xml:space="preserve">
    <value>{0} 已解体。</value>
  </data>
  <data name="SortieingTo" xml:space="preserve">
    <value>⚓ 出击前往{0}-{1}-{2}：{3}</value>
  </data>
  <data name="HasSortiedTo" xml:space="preserve">
    <value>#{0}「{1}」已出击至「{2}-{3} {4}」。</value>
  </data>
  <data name="HasBeenSentToExpedition" xml:space="preserve">
    <value>#{0}「{1}」已前往远征「{2}：{3}」。</value>
  </data>
  <data name="StartedRepairingShip" xml:space="preserve">
    <value>入渠#{0} 号槽的 {1} ({2}/{3})  修复已开始。(油x{4}, 钢x{5}, {6})</value>
  </data>
  <data name="BucketUsed" xml:space="preserve">
    <value>高速修复材×1</value>
  </data>
  <data name="ETA" xml:space="preserve">
    <value>预计修理完成: </value>
  </data>
</root>